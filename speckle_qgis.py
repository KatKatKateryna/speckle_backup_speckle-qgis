# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpeckleQGIS
                                 A QGIS plugin
 SpeckleQGIS Description
 Generated by Plugin Builder: https://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-08-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Speckle Systems
        email                : alan@speckle.systems
 ***************************************************************************/
"""


import os.path
from typing import Any, Callable, List, Optional, Tuple

from qgis.core import (
    Qgis,
    QgsProject,
    QgsCoordinateReferenceSystem,
)
from qgis.PyQt.QtCore import QCoreApplication, QSettings, Qt, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDockWidget
from qgis.core import Qgis, QgsProject, QgsVectorLayer, QgsRasterLayer
from specklepy.api import operations
from specklepy.logging.exceptions import SpeckleException, GraphQLException

# from specklepy.api.credentials import StreamWrapper
from specklepy.api.models import Stream
from specklepy.objects import Base
from specklepy.transports.server import ServerTransport
from specklepy.api.credentials import get_local_accounts  # , StreamWrapper
from specklepy.api.wrapper import StreamWrapper
import webbrowser

# Initialize Qt resources from file resources.py
from resources import *
from speckle.converter.layers import (
    Layer,
    RasterLayer,
    convertSelectedLayers,
    getLayers,
    layerToNative,
    cadLayerToNative,
)
from speckle.logging import logger
from ui.add_stream_modal import AddStreamModalDialog

# Import the code for the dialog
from ui.speckle_qgis_dialog import SpeckleQGISDialog


def traverseObject(
    base: Base,
    callback: Optional[Callable[[Base], bool]],
    check: Optional[Callable[[Base], bool]],
):
    if check and check(base):
        res = callback(base) if callback else False
        if res:
            return
    memberNames = base.get_member_names()
    for name in memberNames:
        try:
            if ["id", "applicationId", "units", "speckle_type"].index(name):
                continue
        except:
            pass
        traverseValue(base[name], callback, check)


def traverseValue(
    value: Any,
    callback: Optional[Callable[[Base], bool]],
    check: Optional[Callable[[Base], bool]],
):
    if isinstance(value, Base):
        traverseObject(value, callback, check)
    if isinstance(value, List):
        for item in value:
            traverseValue(item, callback, check)


class SpeckleQGIS:
    """Speckle Connector Plugin for QGIS"""

    dockwidget: Optional[QDockWidget]
    add_stream_modal: AddStreamModalDialog
    current_streams: List[Tuple[StreamWrapper, Stream]] = []  # {id:(sw,st),id2:()}

    active_stream: Optional[Tuple[StreamWrapper, Stream]]

    qgis_project: QgsProject

    lat: float
    lon: float

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.dockwidget = None
        self.iface = iface
        self.qgis_project = QgsProject.instance()

        self.lat = 0.0
        self.lon = 0.0

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "SpeckleQGIS_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&SpeckleQGIS")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.pluginIsActive = False

    # noinspection PyMethodMayBeStatic

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("SpeckleQGIS", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/speckle_qgis/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("SpeckleQGIS"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # disconnects
        if self.dockwidget:
            self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(self.tr("&SpeckleQGIS"), action)
            self.iface.removeToolBarIcon(action)

    def onSendButtonClicked(self):
        """Handles action when Send button is pressed."""
        if not self.dockwidget:
            return
        # creating our parent base object
        project = QgsProject.instance()
        projectCRS = project.crs()
        layerTreeRoot = project.layerTreeRoot()
        layers = getLayers(layerTreeRoot, layerTreeRoot)

        selectedLayerNames = [
            item.text().replace(" !LARGE!", "")
            for item in self.dockwidget.layersWidget.selectedItems()
        ]

        # Check if stream id/url is empty
        if not self.dockwidget.streamIdField.text():
            logger.logToUser("Please enter a Stream Url/ID.", Qgis.Warning)
            return

        # Reset Survey point
        self.populateSurveyPoint()

        if self.active_stream is None:
            logger.logToUser(
                "There is no active stream. Please select a stream from the list."
            )
            return

        # Check if stream no layers are selected
        if len(selectedLayerNames) == 0:
            logger.logToUser("No layers selected", Qgis.Warning)
            return

        # Get the stream wrapper
        streamWrapper = self.active_stream[0]
        streamId = streamWrapper.stream_id
        client = streamWrapper.get_client()
        # Ensure the stream actually exists
        try:
            stream = self.tryGetStream(streamWrapper)
        except SpeckleException as e:
            logger.logToUser(e.message, Qgis.Warning)
            return

        base_obj = Base()
        base_obj.layers = convertSelectedLayers(
            layers, selectedLayerNames, projectCRS, project
        )

        # next create a server transport - this is the vehicle through which you will send and receive
        transport = ServerTransport(client=client, stream_id=streamId)

        try:
            # this serialises the block and sends it to the transport
            objId = operations.send(base=base_obj, transports=[transport])
        except SpeckleException as error:
            logger.logToUser("Error sending data", Qgis.Critical)
            return

        message = self.dockwidget.messageInput.text()
        try:
            # you can now create a commit on your stream with this object
            client.commit.create(
                stream_id=streamId,
                object_id=objId,
                branch_name=self.dockwidget.streamBranchDropdown.currentText(),
                message="Sent objects from QGIS" if len(message) == 0 else message,
                source_application="QGIS",
            )
            logger.logToUser("Successfully sent data to stream: " + streamId)
            self.dockwidget.messageInput.setText("")
        except SpeckleException as e:
            logger.logToUser("Error creating commit", Qgis.Critical)

    def onReceiveButtonClicked(self):
        """Handles action when the Receive button is pressed"""

        if not self.dockwidget:
            return

        # Check if stream id/url is empty
        if not self.dockwidget.streamIdField.text():
            logger.logToUser("Please enter a Stream Url/ID.", Qgis.Warning)
            return

        if self.active_stream is None:
            logger.logToUser(
                "There is no active stream. Please select a stream from the list.",
                Qgis.Error,
            )
            return

        # Get the stream wrapper
        streamWrapper = self.active_stream[0]
        streamId = streamWrapper.stream_id
        client = streamWrapper.get_client()
        # Ensure the stream actually exists
        try:
            try:
                stream = self.tryGetStream(streamWrapper)
            except SpeckleException as e:
                logger.logToUser(e.message, Qgis.Warning)
                return

            if stream.branches is None:
                logger.logToUser("Stream has no branches", Qgis.Warning)
                return
            branchName = self.dockwidget.streamBranchDropdown.currentText()
            branch = None
            for b in stream.branches.items:
                if b.name == branchName:
                    branch = b
                    break
            if branch is None or branch.commits is None:
                logger.logToUser("Failed to find a branch", Qgis.Warning)
                return
            if len(branch.commits.items) == 0:
                logger.logToUser("Branch contains no commits", Qgis.Warning)
                return

            commit = None
            try:
                commitId = self.dockwidget.commitDropdown.currentText().split(" | ")[0]
            except:
                logger.logToUser("Commit ID is not valid", Qgis.Warning)
                return
            for i in branch.commits.items:
                if i.id == commitId:
                    commit = i
                    break
            if commit is None:
                try:
                    commit = branch.commits.items[0]
                    logger.logToUser(
                        "Failed to find a commit. Receiving Latest", Qgis.Warning
                    )
                except:
                    logger.logToUser("Failed to find a commit", Qgis.Warning)
                return

        except SpeckleException as error:
            logger.logToUser(str(error), Qgis.Critical)
            return

        # next create a server transport - this is the vehicle through which you will send and receive
        try:
            transport = ServerTransport(client=client, stream_id=streamId)
        except:
            logger.logToUser(
                "Make sure your account has access to the chosen stream", Qgis.Warning
            )
            return

        try:
            # commit = branch.commits.items[0]
            objId = commit.referencedObject
            commitDetailed = client.commit.get(streamId, commit.id)
            app = commitDetailed.sourceApplication
            if objId is None:
                return
            commitObj = operations.receive(objId, transport, None)

            if app != "QGIS":
                if (
                    QgsProject.instance().crs().isGeographic() is True
                    or QgsProject.instance().crs().isValid() is False
                ):
                    logger.logToUser(
                        "Please set the project CRS to Projected type to receive CAD geometry (e.g. EPSG:32631), or create a custom one from geographic coordinates",
                        Qgis.Warning,
                    )
                    return
            logger.log(f"Succesfully received {objId}")

            # Clear 'latest' group
            streamBranch = streamId + "_" + branch.name + "_" + str(commit.id)
            newGroupName = f"{streamBranch}"
            root = QgsProject.instance().layerTreeRoot()
            if root.findGroup(newGroupName) is not None:
                layerGroup = root.findGroup(newGroupName)
                for child in layerGroup.children():
                    QgsProject.instance().removeMapLayer(child.layerId())

            if app == "QGIS":
                check: Callable[[Base], bool] = lambda base: isinstance(
                    base, Layer
                ) or isinstance(base, RasterLayer)
            else:
                check: Callable[[Base], bool] = lambda base: isinstance(base, Base)

            def callback(base: Base) -> bool:
                if isinstance(base, Layer) or isinstance(base, RasterLayer):
                    layer = layerToNative(base, streamBranch)
                    if layer is not None:
                        logger.log("Layer created: " + layer.name())
                else:
                    loopObj(base, "")
                return True

            def loopObj(base: Base, baseName: str):
                memberNames = base.get_member_names()
                for name in memberNames:
                    if name in ["id", "applicationId", "units", "speckle_type"]:
                        continue
                    try:
                        loopVal(base[name], baseName + "/" + name)
                    except:
                        pass

            def loopVal(value, name):  # "name" is the parent object/property/layer name
                if isinstance(value, Base):
                    try:  # dont go through parts of Speckle Geometry object
                        if value.speckle_type.startswith("Objects.Geometry."):
                            pass
                        else:
                            loopObj(value, name)
                    except:
                        loopObj(value, name)

                if isinstance(value, List):
                    for item in value:
                        loopVal(item, name)
                        if item.speckle_type and item.speckle_type.startswith(
                            "Objects.Geometry."
                        ):
                            pt, pl = cadLayerToNative(value, name, streamBranch)
                            if pt is not None:
                                logger.log("Layer group created: " + pt.name())
                            if pl is not None:
                                logger.log("Layer group created: " + pl.name())
                            break

            traverseObject(commitObj, callback, check)

        except SpeckleException as e:
            logger.logToUser("Receive failed", Qgis.Critical)
            return

    def populateLayerDropdown(self):
        if not self.dockwidget:
            return
        # Fetch the currently loaded layers
        layers = QgsProject.instance().mapLayers().values()

        # Clear the contents of the comboBox from previous runs
        self.dockwidget.layersWidget.clear()
        # Populate the comboBox with names of all the loaded layers
        # self.dockwidget.layersWidget.addItems([layer.name() for layer in layers])

        nameDisplay = []
        for layer in layers:
            if isinstance(layer, QgsRasterLayer):
                if layer.width() * layer.height() > 1000000:
                    nameDisplay.append(layer.name() + " !LARGE!")
                else:
                    nameDisplay.append(layer.name())
            elif isinstance(layer, QgsVectorLayer):
                if layer.featureCount() > 20000:
                    nameDisplay.append(layer.name() + " !LARGE!")
                else:
                    nameDisplay.append(layer.name())
            else:
                nameDisplay.append(layer.name())
        # print(nameDisplay)
        # [x for _, x in sorted(zip(nameToSort, nameDisplay))]
        nameDisplay.sort(key=lambda v: v.upper())
        # print(nameDisplay)
        self.dockwidget.layersWidget.addItems(nameDisplay)

    def populateProjectStreams(self):
        if not self.dockwidget:
            return
        # print(self.current_streams)
        self.dockwidget.streamList.clear()

        self.dockwidget.streamList.addItems(
            [
                f"Stream not accessible - {stream[0].stream_id}"
                if stream[1] is None
                else f"{stream[1].name} - {stream[1].id}"
                for stream in self.current_streams
            ]
        )
        self.set_project_streams()

    def populateSurveyPoint(self):
        if not self.dockwidget:
            return
        try:
            self.dockwidget.surveyPointLat.clear()
            self.dockwidget.surveyPointLat.setText(str(self.lat))
            self.dockwidget.surveyPointLon.clear()
            self.dockwidget.surveyPointLon.setText(str(self.lon))
        except:
            return

    def populateActiveStreamBranchDropdown(self):
        if not self.dockwidget:
            return
        self.dockwidget.streamBranchDropdown.clear()
        if (
            self.active_stream is None
            or self.active_stream[1] is None
            or self.active_stream[1].branches is None
        ):
            return
        self.dockwidget.streamBranchDropdown.addItems(
            [f"{branch.name}" for branch in self.active_stream[1].branches.items]
        )

    def populateActiveCommitDropdown(self):
        if not self.dockwidget:
            return
        self.dockwidget.commitDropdown.clear()
        if self.active_stream is None:
            return
        branchName = self.dockwidget.streamBranchDropdown.currentText()
        branch = None
        if self.active_stream[1].branches:
            for b in self.active_stream[1].branches.items:
                if b.name == branchName:
                    branch = b
                    break
        if branch and branch.commits:
            try:
                self.dockwidget.commitDropdown.addItems(
                    [
                        f"{commit.id}" + " | " + f"{commit.message}"
                        for commit in branch.commits.items
                    ]
                )
            except:
                pass

    def reloadUI(self):
        self.is_setup = self.check_for_accounts()
        if self.dockwidget is not None:
            self.active_stream = None
            self.get_project_streams()
            self.populateLayerDropdown()
            self.populateProjectStreams()
            self.get_survey_point()
            self.populateSurveyPoint()
            self.dockwidget.streamIdField.clear()
            self.dockwidget.streamBranchDropdown.clear()
            self.dockwidget.commitDropdown.clear()
            self.dockwidget.receiveButton.setEnabled(self.is_setup)
            self.dockwidget.sendButton.setEnabled(self.is_setup)
            self.dockwidget.streams_add_button.setEnabled(self.is_setup)
            self.dockwidget.streams_remove_button.setEnabled(self.is_setup)
            self.dockwidget.streamBranchDropdown.setEnabled(self.is_setup)
            self.dockwidget.commitDropdown.setEnabled(self.is_setup)

    def check_for_accounts(self):
        def go_to_manager():
            webbrowser.open("https://speckle-releases.netlify.app/")

        accounts = get_local_accounts()
        if len(accounts) == 0:
            logger.logToUserWithAction(
                "No accounts were found. Please remember to install the Speckle Manager and setup at least one account",
                "Download Manager",
                go_to_manager,
            )
            return False
        return True

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        self.is_setup = self.check_for_accounts()

        if self.pluginIsActive:
            self.reloadUI()
        else:
            self.pluginIsActive = True
            if self.dockwidget is None:
                self.dockwidget = SpeckleQGISDialog()
                self.qgis_project.fileNameChanged.connect(self.reloadUI)
                self.qgis_project.homePathChanged.connect(self.reloadUI)

            # Setup events on first load only!
            self.dockwidget.sendButton.clicked.connect(self.onSendButtonClicked)
            self.dockwidget.receiveButton.clicked.connect(self.onReceiveButtonClicked)
            self.dockwidget.reloadButton.clicked.connect(self.reloadUI)
            self.dockwidget.saveSurveyPoint.clicked.connect(self.set_survey_point)
            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # Connect streams section events
            self.dockwidget.streams_add_button.clicked.connect(
                self.onStreamAddButtonClicked
            )
            self.dockwidget.streams_remove_button.clicked.connect(
                self.onStreamRemoveButtonClicked
            )
            self.dockwidget.streamList.itemSelectionChanged.connect(
                self.onActiveStreamChanged
            )
            self.dockwidget.streamBranchDropdown.currentIndexChanged.connect(
                self.populateActiveCommitDropdown
            )

            self.get_project_streams()

            # Populate the UI dropdowns
            self.populateLayerDropdown()
            self.populateProjectStreams()
            self.get_survey_point()
            self.populateSurveyPoint()

            # Setup reload of UI dropdowns when layers change.
            layerRoot = QgsProject.instance()
            layerRoot.layersAdded.connect(self.reloadUI)
            layerRoot.layersRemoved.connect(self.reloadUI)

            # show the dockwidget
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)

            self.dockwidget.receiveButton.setEnabled(self.is_setup)
            self.dockwidget.sendButton.setEnabled(self.is_setup)
            self.dockwidget.sendButton.setEnabled(self.is_setup)
            self.dockwidget.streams_add_button.setEnabled(self.is_setup)
            self.dockwidget.streams_remove_button.setEnabled(self.is_setup)
            self.dockwidget.streamBranchDropdown.setEnabled(self.is_setup)
            self.dockwidget.commitDropdown.setEnabled(self.is_setup)
            self.dockwidget.show()

    def onStreamAddButtonClicked(self):
        self.add_stream_modal = AddStreamModalDialog(None)
        self.add_stream_modal.handleStreamAdd.connect(self.handleStreamAdd)
        self.add_stream_modal.show()

    def onStreamRemoveButtonClicked(self):
        if not self.dockwidget:
            return
        index = self.dockwidget.streamList.currentIndex().row()
        # if index == 0:
        self.current_streams.pop(index)
        self.active_stream = None
        self.dockwidget.streamBranchDropdown.clear()
        self.dockwidget.commitDropdown.clear()
        self.dockwidget.streamIdField.setText("")

        self.set_project_streams()
        self.populateProjectStreams()

    def onActiveStreamChanged(self):
        if not self.dockwidget:
            return
        if len(self.current_streams) == 0:
            return
        index = self.dockwidget.streamList.currentRow()
        if index == -1:
            return
        try:
            self.active_stream = self.current_streams[index]
        except:
            self.active_stream = None
        self.dockwidget.streamIdField.setText(
            self.dockwidget.streamList.currentItem().text()
        )
        self.populateActiveStreamBranchDropdown()
        self.populateActiveCommitDropdown()

    def tryGetStream(self, sw: StreamWrapper):
        client = sw.get_client()
        stream = client.stream.get(sw.stream_id)
        if isinstance(stream, GraphQLException):
            raise SpeckleException(stream.errors[0]["message"])
        return stream

    def handleStreamAdd(self, sw: StreamWrapper):
        try:
            stream = self.tryGetStream(sw)
        except SpeckleException as e:
            logger.logToUser(e.message, Qgis.Warning)
            stream = None
        self.current_streams.append((sw, stream))
        self.add_stream_modal.handleStreamAdd.disconnect(self.handleStreamAdd)
        self.set_project_streams()
        self.populateProjectStreams()

    # Persist added streams in project
    def set_project_streams(self):
        proj = QgsProject().instance()
        value = ",".join([stream[0].stream_url for stream in self.current_streams])
        proj.writeEntry("speckle-qgis", "project_streams", value)

    def get_project_streams(self):
        proj = QgsProject().instance()
        saved_streams = proj.readEntry("speckle-qgis", "project_streams", "")
        ######### need to check whether saved streams are available (account reachable)
        if saved_streams[1] and len(saved_streams[0]) != 0:
            temp = []
            for url in saved_streams[0].split(","):
                try:
                    sw = StreamWrapper(url)
                    try:
                        stream = self.tryGetStream(sw)
                    except SpeckleException as e:
                        logger.logToUser(e.message, Qgis.Warning)
                        stream = None
                    # strId = stream.id # will cause exception if invalid
                    temp.append((sw, stream))
                except SpeckleException as e:
                    logger.logToUser(e.message, Qgis.Warning)
                # except GraphQLException as e:
                #    logger.logToUser(e.message, Qgis.Warning)

            self.current_streams = temp

    def set_survey_point(self):
        # from widget (3 strings) to local vars AND memory (1 string)
        proj = QgsProject().instance()
        vals = [
            self.dockwidget.surveyPointLat.text(),
            self.dockwidget.surveyPointLon.text(),
        ]
        # if b:
        try:
            self.lat, self.lon = [float(i) for i in vals]
            pt = str(self.lat) + ";" + str(self.lon)
            proj.writeEntry("speckle-qgis", "survey_point", pt)

            # Create CRS and apply to the project:

            # https://gis.stackexchange.com/questions/379199/having-problem-with-proj-string-for-custom-coordinate-system
            # https://proj.org/usage/projections.html

            newCrsString = (
                "+proj=tmerc +ellps=WGS84 +datum=WGS84 +units=m +no_defs +lon_0="
                + str(self.lon)
                + " lat_0="
                + str(self.lat)
                + " +x_0=0 +y_0=0 +k_0=1"
            )
            newCrs = QgsCoordinateReferenceSystem().fromProj(
                newCrsString
            )  # fromWkt(newProjWkt)
            validate = QgsCoordinateReferenceSystem().createFromProj(newCrsString)

            if validate:
                QgsProject.instance().setCrs(newCrs)
                # listCrs = QgsCoordinateReferenceSystem().validSrsIds()
                # if exists == 0: newCrs.saveAsUserCrs("SpeckleCRS_lon=" + str(sPoint.x()) + "_lat=" + str(sPoint.y())) # srsid() #https://gis.stackexchange.com/questions/341500/creating-custom-crs-in-qgis
                logger.logToUser("Custom project CRS successfully applied", Qgis.Info)
            else:
                logger.logToUser("Custom CRS could not be created", Qgis.Warning)

        except:
            logger.logToUser("Custom CRS could not be created", Qgis.Warning)

    def get_survey_point(self):
        # get from saved project, set to local vars
        proj = QgsProject().instance()
        points = proj.readEntry("speckle-qgis", "survey_point", "")
        if points[1] and len(points[0]) > 0:
            vals = points[0].replace(" ", "").split(";")[:2]
            self.lat, self.lon = [float(i) for i in vals]
